#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([outpath],[o],[Complete path to output directory],[1_fastqc/])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARG_POSITIONAL_SINGLE([metadata],[Metadata file for the samples])
# ARG_POSITIONAL_SINGLE([read-dir],[Directory containing raw read files (fastq.gz)])
# ARG_DEFAULTS_POS()
# ARG_HELP([Small wrapper script for FastQC and MultiQC])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_metadata=
_arg_read_dir=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_outpath="1_fastqc/"


print_help()
{
	printf '%s\n' "Small wrapper script for FastQC and MultiQC"
	printf 'Usage: %s [-o|--outpath <arg>] [-h|--help] [--] <metadata> <read-dir>\n' "$0"
	printf '\t%s\n' "<metadata>: Metadata file for the samples"
	printf '\t%s\n' "<read-dir>: Directory containing raw read files (fastq.gz)"
	printf '\t%s\n' "-o, --outpath: Complete path to output directory (default: '1_fastqc/')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		if test "$_key" = '--'
		then
			shift
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
			-o|--outpath)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_outpath="$2"
				shift
				;;
			--outpath=*)
				_arg_outpath="${_key##--outpath=}"
				;;
			-o*)
				_arg_outpath="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'metadata' and 'read-dir'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_metadata _arg_read_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# Script that concatenates sequencing runs when there are several.
# Written by Stefania Concetta Quattro
# Modified by Sinaeda Anderssen

### Get arguments
READ_DIR=$_arg_read_dir
OUTDIR=$_arg_outpath
SAMPLE_METADATA=$_arg_metadata

### Communicate about your work
echo 'Output directory of FastQC analysis ' $OUTDIR
echo 'Working on samples included in the file ' $SAMPLE_METADATA

if [ ! -d ./$OUTDIR ]; then
  mkdir -p ./$OUTDIR;
fi
mkdir -p $OUTDIR/tmp/

### Loop through samples and make symlinks to RUN1 and RUN2 (to have all fastq files in same directory)
IFS=$'\n'
#for sample in $(cat $SAMPLE_METADATA | cut -f1); do
for line in `sed 1d $SAMPLE_METADATA`; do
  sample=`echo $line | cut -f1`
  #if [[ $sample == \#* ]]; then continue; fi
  fastqc --outdir $OUTDIR --dir $OUTDIR/tmp/ --extract -t 15 $READ_DIR/$sample*R1* $READ_DIR/$sample*R2*
  echo 'Quality analysis (FASTQC) finished for sample ' $sample
done
multiqc $OUTDIR --outdir $OUTDIR --filename 1_multiqc_report.html


# i=1
# for READS_DIR in ${RUNDIRS[@]}; do
#     echo "Read dir is: " $READS_DIR
#     for sample in $(cat $SAMPLE_METADATA | cut -f1); do
#         if [[ $sample == \#* ]]; then continue; fi
#         R1=$(realpath $(find $READS_DIR | grep $sample"." | grep "R1" | grep "\\.fastq\\.gz"))
#         R2=$(realpath $(find $READS_DIR | grep $sample"." | grep "R2" | grep "\\.fastq\\.gz"))
#         sample_name1=`echo $R1 | rev | cut -d"/" -f1 | rev`
#         sample_name2=`echo $R2 | rev | cut -d"/" -f1 | rev`
#         ln -s $R1 $OUTDIR/RUN${i}/$sample_name1
#         ln -s $R2 $OUTDIR/RUN${i}/$sample_name2
#         fastqc --outdir $OUTDIR/RUN${i}/fastqc --dir $OUTDIR/RUN${i}/fastqc/tmp/ --extract -t 15 $OUTDIR/RUN${i}/$sample_name1 $OUTDIR/RUN${i}/$sample_name2
#         echo 'Quality analysis (FASTQC) finished for sample ' $sample ' in ' RUN${i}
#     done
#     multiqc $OUTDIR/RUN${i}/fastqc/
#     i=$(expr $i + 1)
# done

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
